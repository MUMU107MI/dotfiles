#!/bin/bash
#
# @(#) : display shell script usage
#
# @version 0.0.5
# @author  Furukawa, Atsushi <atsushifx@aglabo.com>
# @date    2022-07-02
# @license MIT
#
# @usage <<
#
# ,what <command> : print shell script usage
#
#
# THIS CODE IS MADE AVAILABLE AS IS, WITHOUT WARRANTY OF ANY KIND.
# THE ENTIRE RISK OF THE USE OR THE RESULTS FROM THE USE OF THIS CODE REMAINS WITH THE USER.
#

### initialize
set -euC -o pipefail
readonly THISCMD="$0"
readonly SCRIPTDIR=$(
  cd $(dirname "$0")
  pwd
)
readonly WORKINGDIR="$(pwd)"
readonly LIBDIR="${HOME}/bin/inc"

# cd "$SCRIPTDIR"

### linrary read
. "${LIBDIR}/utils.inc.sh"

### Global Variables
# @global filenames from command line
INPUT_FILES=

# @global command flag (0:what/ 1:header)
FLAG_HEADER=0

## utility functionis

### command functions

#
# what
#  print oneline usage created bt '@(#)' comment
what() {
  local _file
  _file="$*"

  local _cmd=$(basename "$_file")
  local _ver=$(strings "$_file" | grep '@version' | head -1 | awk '{print $3}')
  local _desc=$(strings "$_file" | grep '@(#)' | head -1 | sed -e 's/[^.]*#)[ :]*//')

  echo "${_cmd} ( v$_ver ) : ${_desc}"
  return 0
}

##
# header : print usage created by header comment
#
# @param nil
# @return usage message
#
# @desc<<
# print usage created by header commeny
# message begins @help, @usage, @desc(ription) and
# ends by null line or '<<'(for binary)
#
#<<
header() {
  local _file="$*"
  local _type=$(_isBinary "$_file")

  if [[ "$_type" == "text" ]]; then
    cat "${_file}" |
      sed -r '1,/^#[ ]*@(usage|help|desc)/d' |
      sed -r '/^$/,${ d; }' |
      tail +2 |
      sed -e 's/^[#< ]*//' |
      cat -s
  else
    strings "${_file}" |
      sed -r '1,/^#[ ]*@(usage|help|desc)/d' |
      sed -r '/^$/,${ d; }' |
      tail +2 |
      sed -e 's/^[#< ]*//' |
      cat -s
  fi
}

### main block (call this script as command)]
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then

  ## main functions

  #
  # usage : print usage messages from this command
  #
  usage() {
    header ${THISCMD}
    exit 1
  }

  #
  # print this command's version
  #
  version() {
    what ${THISCMD}
    exit 0
  }

  #
  # parse_args : check option and file from commanf line
  #
  parse_args() {
    while getopts "dvh" OPT; do
      case $OPT in
      d) FLAG_HEADER=1 ;;
      v) version ;;
      h) usage ;;
      *) echo "default:" ;;
      esac
    done
    shift $((OPTIND - 1))
    INPUT_FILES="$*"
  }

fi
### end OF main functions

### mai roution
main() {
  local _file

  for _file in "(${@})"; do
    echo "$_file"
  done
}

if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then
  parse_args "$@"

  if [[ "${INPUT_FILES}" == "" ]]; then
    version
  else
    main ${INPUT_FILES}
  fi
fi
